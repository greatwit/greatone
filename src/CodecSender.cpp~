
#include "CodecSender.h"

#include "ComDefine.h"
#define TAG "CodecSender"


#define ALOGTEST(...)	__android_log_print(ANDROID_LOG_INFO,	TAG,  __VA_ARGS__)
#define ALOGE(...)	__android_log_print(ANDROID_LOG_ERROR,	TAG,  __VA_ARGS__)




CodecSender::CodecSender()
			:mbRunning(false)
{
	ALOGV("SenderServer::SenderServer() construct.");
}

CodecSender::~CodecSender()
{
	ALOGV("SenderServer, Destructor");
}

bool CodecSender::CreateCodec(JNIEnv *env, jobject thiz, const sp<AMessage> &format, const sp<Surface> &surface, const sp<ICrypto> &crypto, int flags)
{
	mcharLength[4] = {0};
	mData[1000000] = {0};

	

	return true;
}

bool CodecSender::CreateCodec( const sp<AMessage> &format, const sp<Surface> &surface, const sp<ICrypto> &crypto, int flags)
{
	mcharLength[4] = {0};
	mData[1000000] = {0};

	
	mCodec = new CodecBase("video/avc", true, true);
	mCodec->CreateCodec(format, surface, crypto, flags);
	mCodec->registerBufferCall(this);
	
	return true;
}

bool CodecSender::DeInit()
{	
	StopVideo();
	
	return true;
}


bool CodecSender::StartVideo(int deivceid)
{

	mCodec->startCodec();

	VIDEOLOGD("TAG 2,function %s,line:%d",__FUNCTION__,__LINE__);


	return true;
}

bool CodecSender::StopVideo()
{

	ALOGW("TAG 1,function %s,line:%d StopVideo 0",__FUNCTION__,__LINE__);

	mCodec->stopCodec();
	
	VIDEOLOGD("TAG 1,function %s,line:%d StopVideo 2",__FUNCTION__,__LINE__);

	return true;
}

void CodecSender::onCodecBuffer(struct CodecBuffer& buff)
{
	ALOGTEST("onCodecBuffer--size:%d flags:%d", buff.size, buff.flags);
}

void CodecSender::AddDecodecSource(char *data, int len)
{
	mCodec->addBuffer(data, len);
}



